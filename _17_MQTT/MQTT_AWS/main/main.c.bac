#include <stdio.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/event_groups.h"
#include "freertos/queue.h"
#include "esp_wifi.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "cJSON.h"
#include "mqtt_client.h"

#include "aws_iot_config.h"
#include "aws_iot_log.h"
#include "aws_iot_version.h"
#include "aws_iot_mqtt_client_interface.h"
#include "aws_iot_error.h"

#define TAG "AWS MQTT"
xSemaphoreHandle connectionSemaphore;

extern const unsigned char cert[] asm("_binary_certificate_pem_crt_start");
extern const unsigned char root_ca[] asm("_binary_aws_root_ca_pem_start");
extern const unsigned char priv_key[] asm("_binary_private_pem_key_start");

const uint32_t WIFI_CONNEECTED = BIT1;
const uint32_t MQTT_CONNECTED = BIT2;
const uint32_t MQTT_PUBLISHED = BIT3;

xSemaphoreHandle connectionSemaphore;

static void event_handler(void *event_handler_arg, esp_event_base_t event_base, int32_t event_id, void *event_data)
{
  printf("event_base, event_id %d\n", event_id);
  if (event_id == IP_EVENT_STA_GOT_IP)
    xSemaphoreGive(connectionSemaphore);
}

void wifiInit()
{
  ESP_ERROR_CHECK(nvs_flash_init());
  ESP_ERROR_CHECK(esp_netif_init());
  ESP_ERROR_CHECK(esp_event_loop_create_default());
  esp_netif_create_default_wifi_sta();
  wifi_init_config_t wifi_init_config = WIFI_INIT_CONFIG_DEFAULT();
  ESP_ERROR_CHECK(esp_wifi_init(&wifi_init_config));
  ESP_ERROR_CHECK(esp_event_handler_register(WIFI_EVENT, ESP_EVENT_ANY_ID, event_handler, NULL));
  ESP_ERROR_CHECK(esp_event_handler_register(IP_EVENT, IP_EVENT_STA_GOT_IP, event_handler, NULL));
  ESP_ERROR_CHECK(esp_wifi_set_storage(WIFI_STORAGE_RAM));
  wifi_config_t wifi_config =
      {
          .sta = {
              .ssid = CONFIG_WIFI_SSID,
              .password = CONFIG_WIFI_PASSWORD}};
  esp_wifi_set_config(ESP_IF_WIFI_STA, &wifi_config);
  ESP_ERROR_CHECK(esp_wifi_start());
  ESP_ERROR_CHECK(esp_wifi_connect());
}



void iot_subscribe_callback_handler(AWS_IoT_Client *pClient, char *topicName, uint16_t topicNameLen,
                                    IoT_Publish_Message_Params *params, void *pData) {
    ESP_LOGI(TAG, "Subscribe callback");
    ESP_LOGI(TAG, "%.*s\t%.*s", topicNameLen, topicName, (int) params->payloadLen, (char *)params->payload);
}


void disconnectCallbackHandler(AWS_IoT_Client *pClient, void *data)
{
  ESP_LOGW(TAG, "MQTT Disconnect");
  IoT_Error_t rc = FAILURE;

  if (NULL == pClient)
  {
    return;
  }

  if (aws_iot_is_autoreconnect_enabled(pClient))
  {
    ESP_LOGI(TAG, "Auto Reconnect is enabled, Reconnecting attempt will start now");
  }
  else
  {
    ESP_LOGW(TAG, "Auto Reconnect not enabled. Starting manual reconnect...");
    rc = aws_iot_mqtt_attempt_reconnect(pClient);
    if (NETWORK_RECONNECTED == rc)
    {
      ESP_LOGW(TAG, "Manual Reconnect Successful");
    }
    else
    {
      ESP_LOGW(TAG, "Manual Reconnect Failed - %d", rc);
    }
  }
}

void MQTTLogic(void * params)
{


   xSemaphoreTake(connectionSemaphore, portMAX_DELAY);


int32_t i = 0;
  AWS_IoT_Client client;
  IoT_Client_Init_Params mqttInitParams = iotClientInitParamsDefault;
  IoT_Client_Connect_Params connectParams = iotClientConnectParamsDefault;

  ESP_LOGI(TAG, "AWS IoT SDK Version %d.%d.%d-%s", VERSION_MAJOR, VERSION_MINOR, VERSION_PATCH, VERSION_TAG);

  printf("root_ca %s\n",(char*)root_ca);

  mqttInitParams.enableAutoReconnect = false; // We enable this later below
  mqttInitParams.pHostURL = "a3fgpvfi66f07r-ats.iot.ap-southeast-2.amazonaws.com";//AWS_IOT_MQTT_HOST;
  mqttInitParams.port = AWS_IOT_MQTT_PORT;
  mqttInitParams.pRootCALocation = (char *)root_ca;
  mqttInitParams.pDeviceCertLocation = (char *)cert;
  mqttInitParams.pDevicePrivateKeyLocation = (char *)priv_key;
  mqttInitParams.mqttCommandTimeout_ms = 20000;
  mqttInitParams.tlsHandshakeTimeout_ms = 5000;
  mqttInitParams.isSSLHostnameVerify = true;
  mqttInitParams.disconnectHandler = disconnectCallbackHandler;
  mqttInitParams.disconnectHandlerData = NULL;

  IoT_Error_t rc = aws_iot_mqtt_init(&client, &mqttInitParams);
  if (SUCCESS != rc)
  {
    ESP_LOGE(TAG, "aws_iot_mqtt_init returned error : %d ", rc);
    abort();
  }

  connectParams.keepAliveIntervalInSec = 10;
  connectParams.isCleanSession = true;
  connectParams.MQTTVersion = MQTT_3_1_1;
  /* Client ID is set in the menuconfig of the example */
  connectParams.pClientID = CONFIG_AWS_IOT_CLIENT_ID;
  connectParams.clientIDLen = (uint16_t)strlen(CONFIG_AWS_IOT_CLIENT_ID);
  connectParams.isWillMsgPresent = false;


  do
  {
    rc = aws_iot_mqtt_connect(&client, &connectParams);
    if (SUCCESS != rc)
    {
      ESP_LOGE(TAG, "Error(%d) connecting to %s:%d", rc, mqttInitParams.pHostURL, mqttInitParams.port);
      vTaskDelay(1000 / portTICK_RATE_MS);
    }
  } while (SUCCESS != rc);

  ESP_LOGI(TAG, "Connecting to AWS...");
  do
  {
    rc = aws_iot_mqtt_connect(&client, &connectParams);
    if (SUCCESS != rc)
    {
      ESP_LOGE(TAG, "Error(%d) connecting to %s:%d", rc, mqttInitParams.pHostURL, mqttInitParams.port);
      vTaskDelay(1000 / portTICK_RATE_MS);
    }
  } while (SUCCESS != rc);

  /*
     * Enable Auto Reconnect functionality. Minimum and Maximum time of Exponential backoff are set in aws_iot_config.h
     *  #AWS_IOT_MQTT_MIN_RECONNECT_WAIT_INTERVAL
     *  #AWS_IOT_MQTT_MAX_RECONNECT_WAIT_INTERVAL
     */
  rc = aws_iot_mqtt_autoreconnect_set_status(&client, true);
  if (SUCCESS != rc)
  {
    ESP_LOGE(TAG, "Unable to set Auto Reconnect to true - %d", rc);
    abort();
  }

  const char *TOPIC = "test_topic/esp32";
  const int TOPIC_LEN = strlen(TOPIC);

  ESP_LOGI(TAG, "Subscribing...");
  rc = aws_iot_mqtt_subscribe(&client, TOPIC, TOPIC_LEN, QOS0, iot_subscribe_callback_handler, NULL);
  if (SUCCESS != rc)
  {
    ESP_LOGE(TAG, "Error subscribing : %d ", rc);
    abort();
  }

  char cPayload[100];
  sprintf(cPayload, "%s : %d ", "hello from SDK", i);

  IoT_Publish_Message_Params paramsQOS0;
  paramsQOS0.qos = QOS0;
  paramsQOS0.payload = (void *)cPayload;
  paramsQOS0.isRetained = 0;

  IoT_Publish_Message_Params paramsQOS1;
  paramsQOS1.qos = QOS1;
  paramsQOS1.payload = (void *)cPayload;
  paramsQOS1.isRetained = 0;

  while ((NETWORK_ATTEMPTING_RECONNECT == rc || NETWORK_RECONNECTED == rc || SUCCESS == rc))
  {

    //Max time the yield function will wait for read messages
    rc = aws_iot_mqtt_yield(&client, 100);
    if (NETWORK_ATTEMPTING_RECONNECT == rc)
    {
      // If the client is attempting to reconnect we will skip the rest of the loop.
      continue;
    }

    ESP_LOGI(TAG, "Stack remaining for task '%s' is %d bytes", pcTaskGetTaskName(NULL), uxTaskGetStackHighWaterMark(NULL));
    vTaskDelay(1000 / portTICK_RATE_MS);
    sprintf(cPayload, "%s : %d ", "hello from ESP32 (QOS0)", i++);
    paramsQOS0.payloadLen = strlen(cPayload);
    rc = aws_iot_mqtt_publish(&client, TOPIC, TOPIC_LEN, &paramsQOS0);

    sprintf(cPayload, "%s : %d ", "hello from ESP32 (QOS1)", i++);
    paramsQOS1.payloadLen = strlen(cPayload);
    rc = aws_iot_mqtt_publish(&client, TOPIC, TOPIC_LEN, &paramsQOS1);
    if (rc == MQTT_REQUEST_TIMEOUT_ERROR)
    {
      ESP_LOGW(TAG, "QOS1 publish ack not received.");
      rc = SUCCESS;
    }
  }

  ESP_LOGE(TAG, "An error occurred in the main loop.");
  abort();
}

void app_main()
{
  connectionSemaphore = xSemaphoreCreateBinary();
  wifiInit();
  xTaskCreate(MQTTLogic, "handel comms", 1024 * 20, NULL, 5,NULL);

}